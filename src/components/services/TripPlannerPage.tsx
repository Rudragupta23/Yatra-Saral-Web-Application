import React, { useState, useEffect } from 'react';
import { useForm, Controller } from 'react-hook-form';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { motion } from 'framer-motion';
import { Plus, Trash2, Map, ArrowLeft, Download, Calendar, Save, Printer, Utensils, Bed, TramFront, Camera, Briefcase, Clock, MapPin, GripVertical, ShoppingCart, Coffee } from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';

interface Activity {
    id: string;
    day: number;
    time: string;
    activityName: string;
    location: string;
    duration: string;
    type: string;
    description?: string;
}

interface TripDetails {
    destination: string;
    startDate: string;
    endDate: string;
}

export const TripPlannerPage = ({ onNavigate }: { onNavigate: (section: string) => void }) => {
    const [trip, setTrip] = useState<TripDetails | null>(null);
    const [activities, setActivities] = useState<Activity[]>([]);
    const [name, setName] = useState("");
    const [email, setEmail] = useState("");
    const { toast } = useToast();
    const { register, handleSubmit, reset, control, watch, formState: { errors } } = useForm();
    const { register: activityRegister, handleSubmit: handleActivitySubmit, reset: resetActivity, control: activityControl, setValue, formState: { errors: activityErrors } } = useForm<Activity>();

    const today = new Date().toISOString().split('T')[0];

    const createPlan = (data: any) => {
        setTrip(data);
    };

    const addActivity = (data: Omit<Activity, 'id'>) => {
        const newActivity = { ...data, id: `act-${Date.now()}`};
        setActivities(prev => [...prev, newActivity].sort((a,b) => a.day - b.day || a.time.localeCompare(b.time)));
        resetActivity({ day: data.day, time: '', activityName: '', location: '', duration: '', type: '', description: '' });
        toast({ title: "Activity Added!", description: `${data.activityName} has been added to Day ${data.day}.`});
    };
    
    const removeActivity = (id: string) => {
        setActivities(activities.filter(act => act.id !== id));
    }

    const downloadPlanner = () => {
        if (!trip) return;
        let plannerContent = `Trip Itinerary: ${trip.destination}\n`;
        plannerContent += `Dates: ${trip.startDate} to ${trip.endDate}\n`;
        plannerContent += "============================\n\n";

        const groupedActivities = activities.reduce((acc, activity) => {
            (acc[activity.day] = acc[activity.day] || []).push(activity);
            return acc;
        }, {} as { [key: number]: Activity[] });

        Object.keys(groupedActivities).sort((a,b) => parseInt(a) - parseInt(b)).forEach(dayNumber => {
            plannerContent += `Day ${dayNumber}\n`;
            plannerContent += "----------------------------\n";
            groupedActivities[parseInt(dayNumber)].forEach(act => {
                plannerContent += `${act.time} - ${act.activityName} (${act.duration})\n`;
                plannerContent += `  Type: ${act.type}\n`;
                plannerContent += `  Location: ${act.location}\n`;
                if(act.description) plannerContent += `  Notes: ${act.description}\n`;
                plannerContent += "-\n";
            });
            plannerContent += "\n";
        });
        
        plannerContent += "Generated by Yatra Saral";

        const blob = new Blob([plannerContent], { type: 'text/plain' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${trip.destination.replace(/\s+/g, '_')}_Itinerary.txt`;
        a.click();
        URL.revokeObjectURL(url);
        
        toast({
            title: "Planner Downloaded!",
            description: "Your trip itinerary has been saved as a text file."
        })
    }
  
    const features = [
        { icon: Calendar, title: "Day-by-day plans", description: "Organize your trip into a clear, daily schedule." },
        { icon: Save, title: "Save Itineraries", description: "Your plans are automatically saved in the browser for your next visit." },
        { icon: Printer, title: "Printable View", description: "Download a clean text file of your itinerary to print or share." }
    ];

    const activityTypes = [
        { value: 'Sightseeing', icon: Camera },
        { value: 'Food & Dining', icon: Utensils },
        { value: 'Transportation', icon: TramFront },
        { value: 'Accommodation', icon: Bed },
        { value: 'Activity', icon: Briefcase },
        { value: 'Shopping', icon: ShoppingCart },
        { value: 'Relaxation', icon: Coffee },
    ];
    
    const totalDays = trip ? Math.ceil((new Date(trip.endDate).getTime() - new Date(trip.startDate).getTime()) / (1000 * 3600 * 24)) + 1 : 0;
    const lastPlannedDay = activities.reduce((max, act) => Math.max(max, act.day), 0);
    const availableDaysForNewActivity = Array.from({length: totalDays}, (_, i) => i + 1).filter(day => day <= lastPlannedDay + 1);


    if (!trip) {
        return (
             <div className="pt-16 min-h-screen bg-background">
                <section className="py-20 bg-rose-50 dark:bg-rose-950/20">
                  <div className="container mx-auto px-4">
                      <motion.div initial={{ opacity: 0, y: 50 }} animate={{ opacity: 1, y: 0 }} transition={{ duration: 0.8 }} className="text-center">
                          <div className="inline-flex items-center justify-center w-20 h-20 bg-rose-100 dark:bg-rose-900/30 rounded-full mb-6">
                              <Map className="h-10 w-10 text-rose-600" />
                          </div>
                          <h1 className="text-5xl font-bold mb-6 text-rose-700 dark:text-rose-400">Trip Planner</h1>
                          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">Create detailed day-by-day itineraries.</p>
                      </motion.div>
                  </div>
                </section>
                <section className="py-20 bg-background">
                    <div className="container mx-auto px-4 max-w-xl">
                        <Button 
                            variant="outline" 
                            onClick={() => onNavigate('services')} 
                            className="mb-8 flex items-center"
                        >
                            <ArrowLeft className="h-4 w-4 mr-2" />
                            Back to All Services
                        </Button>
                        <motion.div initial={{ opacity: 0, y: 50 }} animate={{ opacity: 1, y: 0 }}>
                            <Card className="shadow-lg">
                                <CardHeader>
                                    <CardTitle>Create a New Trip Plan</CardTitle>
                                    <CardDescription>Start by telling us where and when you're going.</CardDescription>
                                </CardHeader>
                                <CardContent>
                                    <form onSubmit={handleSubmit(createPlan)} className="space-y-4">
                                        <div className="space-y-2">
                                            <Label htmlFor="destination">Destination</Label>
                                            <Input id="destination" {...register('destination', { required: true })} placeholder="e.g., Goa" />
                                        </div>
                                        <div className="grid grid-cols-2 gap-4">
                                            <div className="space-y-2">
                                                <Label htmlFor="startDate">Start Date</Label>
                                                <Input id="startDate" type="date" {...register('startDate', { required: true })} min={today}/>
                                            </div>
                                            <div className="space-y-2">
                                                <Label htmlFor="endDate">End Date</Label>
                                                <Input id="endDate" type="date" {...register('endDate', { required: true })} min={watch('startDate') || today}/>
                                            </div>
                                        </div>
                                        <Button type="submit" className="w-full">Create Plan</Button>
                                    </form>
                                </CardContent>
                            </Card>
                        </motion.div>
                    </div>
                </section>
            </div>
        )
    }

  return (
    <div className="pt-16 min-h-screen bg-background">
       <section className="py-20 bg-rose-50 dark:bg-rose-950/20">
            <div className="container mx-auto px-4 text-center">
                <Button variant="outline" onClick={() => { setTrip(null); setActivities([]) }} className="absolute top-20 left-4">‚Üê Start a New Plan</Button>
                <h1 className="text-4xl font-bold text-rose-700">Trip to {trip.destination}</h1>
                <p className="text-muted-foreground">{trip.startDate} to {trip.endDate}</p>
            </div>
        </section>
      
       <section className="py-12 bg-background">
            <div className="container mx-auto px-4 max-w-6xl">
                <Button 
                    variant="outline" 
                    onClick={() => onNavigate('services')} 
                    className="mb-8 flex items-center"
                >
                    <ArrowLeft className="h-4 w-4 mr-2" />
                    Back to All Services
                </Button>
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 items-start">
                    {/* Add Activity Form */}
                    <motion.div initial={{ opacity: 0, x: -50 }} animate={{ opacity: 1, x: 0 }} className="lg:sticky top-24 col-span-1">
                        <Card className="shadow-lg">
                            <CardHeader><CardTitle>Add Activity</CardTitle></CardHeader>
                            <CardContent>
                                <form onSubmit={handleActivitySubmit(addActivity)} className="space-y-4">
                                    <div className="grid grid-cols-2 gap-4">
                                        <div className="space-y-2">
                                            <Label>Day</Label>
                                            <Controller
                                                name="day"
                                                control={activityControl}
                                                rules={{ required: "Day is required" }}
                                                render={({ field }) => (
                                                    <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value?.toString()}>
                                                        <SelectTrigger><SelectValue placeholder="Day"/></SelectTrigger>
                                                        <SelectContent>{availableDaysForNewActivity.map(d => <SelectItem key={d} value={d.toString()}>{`Day ${d}`}</SelectItem>)}</SelectContent>
                                                    </Select>
                                                )}
                                            />
                                            {activityErrors.day && <p className="text-sm text-destructive">{activityErrors.day.message as string}</p>}
                                        </div>
                                        <div className="space-y-2">
                                            <Label>Time</Label>
                                            <Input type="time" {...activityRegister('time', {required: true})}/>
                                        </div>
                                    </div>
                                    <div className="space-y-2"><Label>Activity</Label><Input {...activityRegister('activityName', {required: true})} placeholder="e.g., Visit the Gateway of India"/></div>
                                    <div className="space-y-2"><Label>Location</Label><Input {...activityRegister('location', {required: true})} placeholder="e.g., Colaba, Mumbai"/></div>
                                    <div className="grid grid-cols-2 gap-4">
                                        <div className="space-y-2">
                                            <Label>Duration</Label>
                                            <Input {...activityRegister('duration', { required: 'Duration is required', pattern: { value: /^[1-9][0-9]*\s+(hour|hours|min|mins)$/i, message: 'e.g., 30 mins or 1 hour' }})} placeholder="e.g., 2 hours"/>
                                            {activityErrors.duration && <p className="text-sm text-destructive">{activityErrors.duration.message as string}</p>}
                                        </div>
                                        <div className="space-y-2">
                                            <Label>Type</Label>
                                            <Controller
                                                name="type"
                                                control={activityControl}
                                                rules={{ required: "Type is required" }}
                                                render={({ field }) => (
                                                    <Select onValueChange={field.onChange} value={field.value}>
                                                        <SelectTrigger><SelectValue placeholder="Type"/></SelectTrigger>
                                                        <SelectContent>{activityTypes.map(t => <SelectItem key={t.value} value={t.value}>{t.value}</SelectItem>)}</SelectContent>
                                                    </Select>
                                                )}
                                            />
                                            {activityErrors.type && <p className="text-sm text-destructive">{activityErrors.type.message as string}</p>}
                                        </div>
                                    </div>
                                    <div className="space-y-2"><Label>Description (Optional)</Label><Textarea {...activityRegister('description')} placeholder="e.g., Remember to carry water..."/></div>
                                    <Button type="submit" className="w-full"><Plus className="mr-2 h-4 w-4"/>Create Activity</Button>
                                </form>
                            </CardContent>
                        </Card>
                    </motion.div>

                    {/* Itinerary Display */}
                    <motion.div initial={{ opacity: 0, x: 50 }} animate={{ opacity: 1, x: 0 }} className="col-span-1 lg:col-span-2">
                         <Card className="shadow-lg">
                            <CardHeader>
                                <CardTitle>Full Itinerary</CardTitle>
                                 <CardDescription>A complete overview of your planned trip.</CardDescription>
                            </CardHeader>
                            <CardContent>
                                {activities.length > 0 ? (
                                    Object.entries(activities.reduce((acc, activity) => {
                                        (acc[activity.day] = acc[activity.day] || []).push(activity);
                                        return acc;
                                    }, {} as { [key: number]: Activity[] })).sort(([dayA], [dayB]) => parseInt(dayA) - parseInt(dayB)).map(([day, dayActivities]) => (
                                        <div key={day} className="mb-6">
                                            <h3 className="text-2xl font-bold text-primary mb-4 border-b pb-2">Day {day}</h3>
                                            <div className="space-y-4">
                                                {dayActivities.map(act => (
                                                    <div key={act.id} className="p-4 rounded-lg bg-muted flex items-start gap-4">
                                                        <div className="bg-primary/10 p-2 rounded-full mt-1"><GripVertical className="h-5 w-5 text-primary"/></div>
                                                        <div className="flex-1">
                                                            <div className="flex justify-between items-start">
                                                                <div>
                                                                    <p className="font-semibold">{act.activityName}</p>
                                                                    <p className="text-sm text-muted-foreground"><MapPin className="inline h-3 w-3 mr-1"/>{act.location}</p>
                                                                </div>
                                                                 <Button variant="ghost" size="icon" className="h-7 w-7" onClick={() => removeActivity(act.id)}><Trash2 className="h-4 w-4 text-destructive"/></Button>
                                                            </div>
                                                            <div className="flex items-center gap-4 text-xs text-muted-foreground mt-2">
                                                                <span><Clock className="inline h-3 w-3 mr-1"/>{act.time}</span>
                                                                <span>({act.duration})</span>
                                                                <Badge variant="outline">{act.type}</Badge>
                                                            </div>
                                                            {act.description && <p className="text-sm mt-2 pt-2 border-t">{act.description}</p>}
                                                        </div>
                                                    </div>
                                                ))}
                                            </div>
                                        </div>
                                    ))
                                ) : (
                                    <p className="text-center text-muted-foreground py-12">No activities added yet. Use the form on the left to start planning your trip!</p>
                                )}
                            </CardContent>
                            {activities.length > 0 &&
                                 <div className="p-6 border-t">
                                    <Button onClick={downloadPlanner} className="w-full"><Download className="mr-2 h-4 w-4" /> Download Full Itinerary</Button>
                                </div>
                            }
                         </Card>
                    </motion.div>
                </div>
            </div>
       </section>
    </div>
  );
};